AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  healm-users-app
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Lambda function config for create-user.js
  createUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-user.createUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A method that creates a new user
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /
            Method: POST
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Lambda function config for update-user.js
  updateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update-user.updateUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A method that updates a user's attributes
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /{user_id}
            Method: PUT

  # Lambda function config for delete-user.js
  deleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-user.deleteUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A method that deletes a user
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /{user_id}
            Method: DELETE

  # Lambda function config find-user.js
  findUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/find-user.findUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A method that find a user using an attribute
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBReadPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        FindUser:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # Lambda function config get-user.js
  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-user.getUserHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A method that gets a particular user using user_id
      Policies:
        # Give Create/Read/Update/Delete Permissions to the UserTable
        - DynamoDBReadPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          USER_TABLE: !Ref UserTable
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /{user_id}
            Method: GET

  # DynamoDB Table to store users
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserTable
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  # Resource Group
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  UsersApi:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true
